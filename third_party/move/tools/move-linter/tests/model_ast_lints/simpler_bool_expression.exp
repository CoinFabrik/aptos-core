
Diagnostics:
warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:30:13
   │
30 │         if (a && b || a) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:31:13
   │
31 │         if (a || a && b) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:38:13
   │
38 │         if (x && y || x) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:39:13
   │
39 │         if (x || x && y) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `||` evaluates to `true`. Recall that the expression `bexpr || true` is logically equivalent to `true`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `false`. Recall that the expression `false && bexpr` is logically equivalent to `false`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:28
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:13
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:13
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:50:13
   │
50 │         if (flags.a && flags.b || flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:51:13
   │
51 │         if (flags.a || flags.a && flags.b) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:60:13
   │
60 │         if (nested.flags.a && nested.enabled || nested.flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using absorption law. The expression `a && b || a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:61:13
   │
61 │         if (nested.flags.a || nested.flags.a && nested.enabled) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:78:13
   │
78 │         if (a && a) ();
   │             ^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:79:13
   │
79 │         if (a || a) ();
   │             ^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:85:13
   │
85 │         if (flag && flag) ();
   │             ^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:86:13
   │
86 │         if (flag || flag) ();
   │             ^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:91:13
   │
91 │         if (TRUE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:92:13
   │
92 │         if (FALSE_CONST || FALSE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:98:13
   │
98 │         if (flags.a && flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:99:13
   │
99 │         if (flags.b || flags.b) ();
   │             ^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:108:13
    │
108 │         if (nested.flags.a && nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using idempotence. The expression `a && a` is equivalent to just `a`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:109:13
    │
109 │         if (nested.flags.b || nested.flags.b) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:127:13
    │
127 │         if (a && !a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:128:13
    │
128 │         if (!a && a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:129:13
    │
129 │         if (a || !a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:130:13
    │
130 │         if (!a || a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:136:13
    │
136 │         if (condition && !condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:137:13
    │
137 │         if (!condition && condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:138:13
    │
138 │         if (condition || !condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:139:13
    │
139 │         if (!condition || condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This expression evaluates to `false`. Recall that the expression `!true` is logically equivalent to `false`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:144:27
    │
144 │         if (TRUE_CONST && !TRUE_CONST) ();
    │                           ^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:144:13
    │
144 │         if (TRUE_CONST && !TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This expression evaluates to `false`. Recall that the expression `!true` is logically equivalent to `false`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:145:13
    │
145 │         if (!TRUE_CONST && TRUE_CONST) ();
    │             ^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `&&` evaluates to `true`. Recall that the expression `bexpr && true` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:145:13
    │
145 │         if (!TRUE_CONST && TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This expression evaluates to `true`. Recall that the expression `!false` is logically equivalent to `true`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:146:28
    │
146 │         if (FALSE_CONST || !FALSE_CONST) ();
    │                            ^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:146:13
    │
146 │         if (FALSE_CONST || !FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This expression evaluates to `true`. Recall that the expression `!false` is logically equivalent to `true`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:147:13
    │
147 │         if (!FALSE_CONST || FALSE_CONST) ();
    │             ^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `||` evaluates to `false`. Recall that the expression `bexpr || false` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:147:13
    │
147 │         if (!FALSE_CONST || FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:153:13
    │
153 │         if (flags.a && !flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:154:13
    │
154 │         if (!flags.a && flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:155:13
    │
155 │         if (flags.a || !flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:156:13
    │
156 │         if (!flags.a || flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:165:13
    │
165 │         if (nested.flags.a && !nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using contradiction. The expression `a && !a` is equivalent to just `false`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:166:13
    │
166 │         if (!nested.flags.a && nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:167:13
    │
167 │         if (nested.flags.a || !nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using tautology. The expression `a || !a` is equivalent to just `true`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:168:13
    │
168 │         if (!nested.flags.a || nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:186:13
    │
186 │         if ((a && b) || (a && c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:187:13
    │
187 │         if ((a || b) && (a || c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:195:13
    │
195 │         if ((a && b) || (a && c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:196:13
    │
196 │         if ((a || b) && (a || c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:200:13
    │
200 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:200:44
    │
200 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:200:13
    │
200 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:201:13
    │
201 │         if ((FALSE_CONST || FALSE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:201:45
    │
201 │         if ((FALSE_CONST || FALSE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:201:13
    │
201 │         if ((FALSE_CONST || FALSE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:208:13
    │
208 │         if ((flags.a && other.a) || (flags.a && other.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:209:13
    │
209 │         if ((flags.a || other.a) && (flags.a || other.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:218:13
    │
218 │         if ((nested.flags.a && nested.enabled) || (nested.flags.a && nested.flags.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified using distributive law. The expression `(a && b) || (a && c)` is equivalent to `a && (b || c)`.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:219:13
    │
219 │         if ((nested.flags.a || nested.enabled) && (nested.flags.a || nested.flags.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The right-hand side of `&&` evaluates to `true`. Recall that the expression `bexpr && true` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:226:13
    │
226 │         if ((helper_function() && TRUE_CONST) || (helper_function() && (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `||` evaluates to `false`. Recall that the expression `bexpr || false` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:227:13
    │
227 │         if ((helper_function() || FALSE_CONST) && (helper_function() || (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:259:13
    │
259 │         if (TRUE_CONST && FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:260:13
    │
260 │         if (FALSE_CONST || TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.
