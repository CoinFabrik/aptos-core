
Diagnostics:
warning: [lint] This boolean expression can be simplified. The expression `a && b || a` is equivalent to just `a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:30:13
   │
30 │         if (a && b || a) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `a || a && b` is equivalent to just `a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:31:13
   │
31 │         if (a || a && b) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `x && y || x` is equivalent to just `x`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:38:13
   │
38 │         if (x && y || x) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `x || x && y` is equivalent to just `x`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:39:13
   │
39 │         if (x || x && y) ();
   │             ^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `||` evaluates to `true`. Recall that the expression `bexpr || true` is logically equivalent to `true`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `TRUE_CONST && FALSE_CONST || TRUE_CONST` is equivalent to just `TRUE_CONST`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:43:13
   │
43 │         if (TRUE_CONST && FALSE_CONST || TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `false`. Recall that the expression `false && bexpr` is logically equivalent to `false`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:28
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:13
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `FALSE_CONST || FALSE_CONST && TRUE_CONST` is equivalent to just `FALSE_CONST`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:44:13
   │
44 │         if (FALSE_CONST || FALSE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.a && flags.b || flags.a` is equivalent to just `flags.a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:50:13
   │
50 │         if (flags.a && flags.b || flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.a || flags.a && flags.b` is equivalent to just `flags.a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:51:13
   │
51 │         if (flags.a || flags.a && flags.b) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.a && nested.enabled || nested.flags.a` is equivalent to just `nested.flags.a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:60:13
   │
60 │         if (nested.flags.a && nested.enabled || nested.flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.a || nested.flags.a && nested.enabled` is equivalent to just `nested.flags.a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:61:13
   │
61 │         if (nested.flags.a || nested.flags.a && nested.enabled) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(helper_function()) && p > 10 || helper_function()` is equivalent to just `helper_function()`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:68:13
   │
68 │         if ((helper_function()) && p > 10 || helper_function()) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(x == helper_function()) || x == helper_function() && p > 10` is equivalent to just `(x == helper_function())`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:69:13
   │
69 │         if ((x == helper_function()) || x == helper_function() && p > 10) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `a && a` is equivalent to just `a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:77:13
   │
77 │         if (a && a) ();
   │             ^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `a || a` is equivalent to just `a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:78:13
   │
78 │         if (a || a) ();
   │             ^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flag && flag` is equivalent to just `flag`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:84:13
   │
84 │         if (flag && flag) ();
   │             ^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flag || flag` is equivalent to just `flag`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:85:13
   │
85 │         if (flag || flag) ();
   │             ^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:89:13
   │
89 │         if (TRUE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `TRUE_CONST && TRUE_CONST` is equivalent to just `TRUE_CONST`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:89:13
   │
89 │         if (TRUE_CONST && TRUE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:90:13
   │
90 │         if (FALSE_CONST || FALSE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `FALSE_CONST || FALSE_CONST` is equivalent to just `FALSE_CONST`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:90:13
   │
90 │         if (FALSE_CONST || FALSE_CONST) ();
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.a && flags.a` is equivalent to just `flags.a`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:96:13
   │
96 │         if (flags.a && flags.a) ();
   │             ^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.b || flags.b` is equivalent to just `flags.b`. Consider replacing with the simpler form.
   ┌─ tests/model_ast_lints/simpler_bool_expression.move:97:13
   │
97 │         if (flags.b || flags.b) ();
   │             ^^^^^^^^^^^^^^^^^^
   │
   = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
   = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.a && nested.flags.a` is equivalent to just `nested.flags.a`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:106:13
    │
106 │         if (nested.flags.a && nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.b || nested.flags.b` is equivalent to just `nested.flags.b`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:107:13
    │
107 │         if (nested.flags.b || nested.flags.b) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(x == helper_function()) && (x == helper_function())` is equivalent to just `(x == helper_function())`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:113:13
    │
113 │         if ((x == helper_function()) && (x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(x == helper_function()) || (x == helper_function())` is equivalent to just `(x == helper_function())`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:114:13
    │
114 │         if ((x == helper_function()) || (x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `a && !a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:124:13
    │
124 │         if (a && !a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!a && a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:125:13
    │
125 │         if (!a && a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `a || !a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:126:13
    │
126 │         if (a || !a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!a || a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:127:13
    │
127 │         if (!a || a) ();
    │             ^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `condition && !condition` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:133:13
    │
133 │         if (condition && !condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!condition && condition` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:134:13
    │
134 │         if (!condition && condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `condition || !condition` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:135:13
    │
135 │         if (condition || !condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!condition || condition` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:136:13
    │
136 │         if (!condition || condition) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This expression evaluates to `false`. Recall that the expression `!true` is logically equivalent to `false`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:140:27
    │
140 │         if (TRUE_CONST && !TRUE_CONST) ();
    │                           ^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:140:13
    │
140 │         if (TRUE_CONST && !TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `TRUE_CONST && !TRUE_CONST` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:140:13
    │
140 │         if (TRUE_CONST && !TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This expression evaluates to `false`. Recall that the expression `!true` is logically equivalent to `false`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:141:13
    │
141 │         if (!TRUE_CONST && TRUE_CONST) ();
    │             ^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `&&` evaluates to `true`. Recall that the expression `bexpr && true` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:141:13
    │
141 │         if (!TRUE_CONST && TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `!TRUE_CONST && TRUE_CONST` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:141:13
    │
141 │         if (!TRUE_CONST && TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This expression evaluates to `true`. Recall that the expression `!false` is logically equivalent to `true`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:142:28
    │
142 │         if (FALSE_CONST || !FALSE_CONST) ();
    │                            ^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:142:13
    │
142 │         if (FALSE_CONST || !FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `FALSE_CONST || !FALSE_CONST` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:142:13
    │
142 │         if (FALSE_CONST || !FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This expression evaluates to `true`. Recall that the expression `!false` is logically equivalent to `true`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:143:13
    │
143 │         if (!FALSE_CONST || FALSE_CONST) ();
    │             ^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The right-hand side of `||` evaluates to `false`. Recall that the expression `bexpr || false` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:143:13
    │
143 │         if (!FALSE_CONST || FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `!FALSE_CONST || FALSE_CONST` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:143:13
    │
143 │         if (!FALSE_CONST || FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.a && !flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:149:13
    │
149 │         if (flags.a && !flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!flags.a && flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:150:13
    │
150 │         if (!flags.a && flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `flags.a || !flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:151:13
    │
151 │         if (flags.a || !flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!flags.a || flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:152:13
    │
152 │         if (!flags.a || flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.a && !nested.flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:161:13
    │
161 │         if (nested.flags.a && !nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!nested.flags.a && nested.flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:162:13
    │
162 │         if (!nested.flags.a && nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `nested.flags.a || !nested.flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:163:13
    │
163 │         if (nested.flags.a || !nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!nested.flags.a || nested.flags.a` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:164:13
    │
164 │         if (!nested.flags.a || nested.flags.a) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(x == helper_function()) && !(x == helper_function())` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:170:13
    │
170 │         if ((x == helper_function()) && !(x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!(x == helper_function()) && (x == helper_function())` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:171:13
    │
171 │         if (!(x == helper_function()) && (x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(x == helper_function()) || !(x == helper_function())` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:172:13
    │
172 │         if ((x == helper_function()) || !(x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `!(x == helper_function()) || (x == helper_function())` is equivalent to just `<unknown>`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:173:13
    │
173 │         if (!(x == helper_function()) || (x == helper_function())) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(a && b) || (a && c)` is equivalent to just `a && (b || c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:181:13
    │
181 │         if ((a && b) || (a && c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(a || b) && (a || c)` is equivalent to just `a || (b && c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:182:13
    │
182 │         if ((a || b) && (a || c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(a && b) || (a && c)` is equivalent to just `a && (b || c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:190:13
    │
190 │         if ((a && b) || (a && c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(a || b) && (a || c)` is equivalent to just `a || (b && c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:191:13
    │
191 │         if ((a || b) && (a || c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:195:13
    │
195 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:195:44
    │
195 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `(TRUE_CONST && TRUE_CONST)` is equivalent to just `TRUE_CONST`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:195:44
    │
195 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)` is equivalent to just `TRUE_CONST && (FALSE_CONST || TRUE_CONST)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:195:13
    │
195 │         if ((TRUE_CONST && FALSE_CONST) || (TRUE_CONST && TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:196:13
    │
196 │         if ((FALSE_CONST || TRUE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:196:44
    │
196 │         if ((FALSE_CONST || TRUE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `(FALSE_CONST || TRUE_CONST) && (FALSE_CONST || TRUE_CONST)` is equivalent to just `(FALSE_CONST || TRUE_CONST)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:196:13
    │
196 │         if ((FALSE_CONST || TRUE_CONST) && (FALSE_CONST || TRUE_CONST)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(flags.a && other.a) || (flags.a && other.c)` is equivalent to just `flags.a && (other.a || other.c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:203:13
    │
203 │         if ((flags.a && other.a) || (flags.a && other.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(flags.a || other.a) && (flags.a || other.c)` is equivalent to just `flags.a || (other.a && other.c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:204:13
    │
204 │         if ((flags.a || other.a) && (flags.a || other.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(nested.flags.a && nested.enabled) || (nested.flags.a && nested.flags.c)` is equivalent to just `nested.flags.a && (nested.enabled || nested.flags.c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:213:13
    │
213 │         if ((nested.flags.a && nested.enabled) || (nested.flags.a && nested.flags.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] This boolean expression can be simplified. The expression `(nested.flags.a || nested.enabled) && (nested.flags.a || nested.flags.c)` is equivalent to just `nested.flags.a || (nested.enabled && nested.flags.c)`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:214:13
    │
214 │         if ((nested.flags.a || nested.enabled) && (nested.flags.a || nested.flags.c)) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The right-hand side of `&&` evaluates to `true`. Recall that the expression `bexpr && true` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:222:13
    │
222 │         if ((x && TRUE_CONST) || (x && (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `(x && TRUE_CONST) || (x && (y > 10))` is equivalent to just `x && (TRUE_CONST || (y > 10))`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:222:13
    │
222 │         if ((x && TRUE_CONST) || (x && (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The right-hand side of `||` evaluates to `false`. Recall that the expression `bexpr || false` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:223:13
    │
223 │         if ((x || FALSE_CONST) && (x || (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] This boolean expression can be simplified. The expression `(x || FALSE_CONST) && (x || (y > 10))` is equivalent to just `x || (FALSE_CONST && (y > 10))`. Consider replacing with the simpler form.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:223:13
    │
223 │         if ((x || FALSE_CONST) && (x || (y > 10))) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(simpler_bool_expression)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#simpler_bool_expression.

warning: [lint] The left-hand side of `&&` evaluates to `true`. Recall that the expression `true && bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:254:13
    │
254 │         if (TRUE_CONST && FALSE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.

warning: [lint] The left-hand side of `||` evaluates to `false`. Recall that the expression `false || bexpr` is logically equivalent to `bexpr`. Consider simplifying.
    ┌─ tests/model_ast_lints/simpler_bool_expression.move:255:13
    │
255 │         if (FALSE_CONST || TRUE_CONST) ();
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^
    │
    = To suppress this warning, annotate the function/module with the attribute `#[lint::skip(nonminimal_bool)]`.
    = For more information, see https://aptos.dev/en/build/smart-contracts/linter#nonminimal_bool.
